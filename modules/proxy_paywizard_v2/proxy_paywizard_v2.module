<?php

require_once('paywizard.php');
define('CACHE_PAYWIZARD', 'cache_paywizard');

/**
 * Implements hook_help.
 * 
 * Displays help and module information
 *
 */
function proxy_paywizard_v2_help($path, $arg) {
}

function proxy_paywizard_v2_flush_caches() {
    return array(CACHE_PAYWIZARD);
}

function proxy_paywizard_v2_admin() {
  $form = array();

  $form['paywizard_htuser'] = array(
    '#type' => 'textfield',
    '#title' => t('htaccess username'),
    '#default_value' => variable_get('paywizard_htuser'),
    '#description' => t("The username to be used for HTTP Basic Auth when accessing PayWizard services."),
    '#required' => TRUE,
  );

    $form['paywizard_htpasswd'] = array(
    '#type' => 'password',
    '#title' => t('htaccess password'),
    '#default_value' => variable_get('paywizard_htpasswd'),
    '#description' => t("The password to be used for HTTP Basic Auth when accessing PayWizard services."),
    '#required' => TRUE,
  );

  $form['paywizard_retailerref'] = array(
    '#type' => 'textfield',
    '#title' => t('Retailer ref'),
    '#default_value' => variable_get('paywizard_retailerref'),
    '#description' => t("The reference identifying the retailer."),
    '#required' => TRUE,
  );

  $form['paywizard_retailerpasswd'] = array(
    '#type' => 'password',
    '#title' => t('Retailer password'),
    '#default_value' => variable_get('paywizard_retailerpasswd'),
    '#description' => t("The password associated with the retailer."),
    '#required' => TRUE,
  );

  $form['paywizard_submitter'] = array(
    '#type' => 'textfield',
    '#title' => t('Submitter'),
    '#default_value' => variable_get('paywizard_submitter'),
    '#description' => t("The identifier for the agent making the API calls."),
    '#required' => TRUE,
  );

  $form['paywizard_authcode'] = array(
    '#type' => 'password',
    '#title' => t('Authcode'),
    '#default_value' => variable_get('paywizard_authcode'),
    '#description' => t("The authcode associated with the submitter."),
    '#required' => TRUE,
  );

  $form['paywizard_rooturl'] = array(
    '#type' => 'textfield',
    '#title' => t('Services root URL'),
    '#default_value' => variable_get('paywizard_rooturl'),
    '#description' => t("The root URL to access the PayWizard services."),
    '#required' => TRUE,
  );
  
  return system_settings_form($form);
  
}

/**
 * Implements hook_menu.
 */
function proxy_paywizard_v2_menu() {
 static $nbcu_config = array();
 $nbcu_config["htUser"] = variable_get('paywizard_htuser');
 $nbcu_config["htPassword"] = variable_get('paywizard_htpasswd');
 $nbcu_config["retailerRef"] = variable_get('paywizard_retailerref');
 $nbcu_config["retailerPassword"] = variable_get('paywizard_retailerpasswd');
 $nbcu_config["submitter"] = variable_get('paywizard_submitter');
 $nbcu_config["authCode"] = variable_get('paywizard_authcode');
 $nbcu_config["rootUrl"] = variable_get('paywizard_rooturl');

 $items = array();
  $items['paywizard'] = array('title' => 'Paywizard SOAP Action Proxy',
		       'page callback' => 'paywizard_action',
		       'page arguments' => array($nbcu_config),
		       'delivery callback' => 'paywizard_deliver_json',
		       'access callback' => true,
		       'type' => MENU_CALLBACK,
		       );
  
  $items['admin/config/proxy_paywizard_v2'] = array(
    'title' => 'PayWizard Proxy module settings',
    'description' => 'Configure the security and connections settings for using the PayWizard proxy',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('proxy_paywizard_v2_admin'),
    'access arguments' => array('administer proxy_paywizard_v2 settings'),
    'type' => MENU_NORMAL_ITEM,
   );
  return $items;
}

function paywizard_action($config) {
 $tvapp = new TVAppAgency($config);
 $response = null;
  try{
    $username = $_GET['username'];
    if (($cache = cache_get('token-'.$username)) && !empty($cache->data)) {
        $response = $cache->data;
    } else {
        if(isset($_GET['pin'])) { // Either there's a PIN or a Password submitted, if not return null
          $pin = $_GET['pin'];
          $response = getCustomerToken($tvapp->requester, $username, $pin, true);
        } elseif(isset($_GET['password'])) {
          $password = $_GET['password'];
          $response = getCustomerToken($tvapp->requester, $username, $password);          
        } else {	
          $tvapp->writeJSONResponse($response);
          exit();
        }
    }
    
    $accessToken = $response->accessToken;
    
    $action = fromArray($_GET, "action", "getCustomerToken");

    switch($action) {
    case "getCustomerToken":
      break;
    case "getRetailerToken":
        return getRetailerToken($tvapp->requester, $username);
        break;
    case "getMerchantDrivenPaymentContractStatus":	
      /* this case will do the following steps to verifiy if a customer has an agreement with a retailer:
	 1 - we get customer access token
	 2 - we get the retailer access token providing the username submitted;
	 3 - if we got a merchant agreement code hardcoded (submitted on init):
	 - use that merchant agreement to get the MerchantDrivenPaymentContractStatus and check if it's good or not, callback accordingly
	 - else we get a merchant payment agreements and do the previous line
      */
      // test URL paywizard-evo.php?action=getMerchantDrivenPaymentContractStatus&username=tvappagency_102@mgtplctest.com&password=password1
        $merchantAgreementCode = fromArray($_GET, "merchantAgreementCode");
        $retailerAccessToken = getRetailerToken($tvapp->requester, $username)->retailerAccessToken;
      $response = $tvapp->getMerchantDrivenPaymentContractStatus($accessToken,$retailerAccessToken,$merchantAgreementCode);
      break;
    case "purchase":
      /* this case will send a purchase request by doing the following steps:
	 1 - get customer access token
	 2 - get retailer access token using the customer username
	 3 - submit a purchase request with those tokens and the variables passed by GET:
	 - retailerTransactionRef
	 - products:
	 <cor:product>
	 <cor:productRef>3442</cor:productRef>
	 <cor:description>The Incredible Hulk</cor:description>
	 <cor:quantity>1</cor:quantity>
	 <cor:monetaryAmount>
	 <core:amount>0.00</core:amount>
	 <core:currencyCode>GBP</core:currencyCode>
	 </cor:monetaryAmount>
	 </cor:product>
      */
      // test URL paywizard-evo.php?action=purchase&username=tvappagency_102@mgtplctest.com&password=password1&retailerTransactionRef=tvappagency_102@mgtplctest.com_1361358667_3442_samsung&products={"productRef":3442,"description":"The Incredible Hulk","quantity":1,"monetaryAmount":{"amount":0.00,"currencyCode":"GBP"}}
      $retailerTransactionRef = fromArray($_GET, "retailerTransactionRef");
      $products = json_decode(fromArray($_GET,"products","[]"));
      $retailerAccessToken = getRetailerToken($tvapp->requester, $username)->retailerAccessToken;
      $response = $tvapp->requester->purchase($accessToken, $retailerAccessToken, $retailerTransactionRef, $products, $username);
      break;
    }
  } catch(Exception $fault){
    $response = $fault;
  }
  return $response;
}

function fromArray($a, $key, $default="") {
    return (isset($a[$key])) ? $a[$key] : $default;
};

function getCustomerToken($requester, $username, $password, $ispin=false) {
    $cid = 'token-'.$username;
    $response = null;
    if (($cache = cache_get($cid,CACHE_PAYWIZARD)) && !empty($cache->data) && ($cache->expire > REQUEST_TIME)) {
        $response = $cache->data;
    } else {
        if($ispin) { // Either there's a PIN or a Password submitted, if not return null
          $response = $requester->getCustomerAccessTokenWithPIN($username,$password);
        } else {
          $response = $requester->getCustomerAccessTokenWithPassword($username,$password);
        }        
        cache_set($cid,$response,CACHE_PAYWIZARD, REQUEST_TIME+$response->expiresIn);
    }
    return $response;
}


function getRetailerToken($requester, $retailerCustRef) {
    $cid = 'retailer-'.$retailerCustRef;
    $response = null;
    if (($cache = cache_get($cid,CACHE_PAYWIZARD)) && !empty($cache->data) && ($cache->expire > REQUEST_TIME)) {
        $response = $cache->data;
    } else {
        $response = $requester->getRetailerAccessToken($retailerCustRef);
        cache_set($cid,$response,CACHE_PAYWIZARD, REQUEST_TIME+$response->expiresIn);
    }
    return $response;    
}

function paywizard_deliver_json($result) {
  
  if($_GET['callback'] && $_GET['callback']!="") {
    drupal_add_http_header("Content-Type","text/javascript; utf-8");
    echo $_GET['callback']."(".json_encode($result).")";
  } else {
    drupal_add_http_header("Content-Type","text/json; utf-8");
    echo json_encode($result);
  }
}

